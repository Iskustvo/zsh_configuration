#!/bin/zsh

############################################ VIM MODES #############################################

# Delete all existing modes.
bindkey -D "${keymaps[@]}" &>/dev/null

# Create custom modes.
bindkey -N 'insert'
bindkey -N 'normal'
bindkey -N 'visual'
bindkey -N 'operator_pending'
bindkey -N 'completion_selection'
bindkey -N 'empty'

# Make zsh work well with custom modes.
bindkey -A 'insert'               'main'
bindkey -A 'insert'               'viins'
bindkey -A 'normal'               'vicmd'
bindkey -A 'operator_pending'     'viopp'
bindkey -A 'completion_selection' 'menuselect'

########################################### KEYBINDINGS ############################################

#       INSERT

bindkey -M 'insert' -R '\x20'-'\x7e'    'self-insert'
bindkey -M 'insert'    '^[[200~'        'bracketed-paste'
bindkey -M 'insert'    '^?'             'backward-delete-char'
bindkey -M 'insert'    '^M'             'accept-line'
bindkey -M 'insert'    '^V'             'vi-quoted-insert'
bindkey -M 'insert'    '^L'             'clear-screen'
bindkey -M 'insert'    '^I'             'expand_or_complete'
bindkey -M 'insert'    '^K'             'history-beginning-search-backward'
bindkey -M 'insert'    '^J'             'history-beginning-search-forward'
bindkey -M 'insert'    '^A'             'insert-last-word'
bindkey -M 'insert'    'jk'             'vi-cmd-mode'

#       NORMAL

# Simple cursor movements.
bindkey -M 'normal' 'h' 'vi-backward-char'
bindkey -M 'normal' 'l' 'vi-forward-char'
bindkey -M 'normal' 'j' 'vi-down-line-or-history'
bindkey -M 'normal' 'k' 'vi-up-line-or-history'
bindkey -M 'normal' '0' 'vi-digit-or-beginning-of-line'
bindkey -M 'normal' '^' 'vi-first-non-blank'
bindkey -M 'normal' '$' 'vi-end-of-line'
bindkey -M 'normal' '%' 'vi-match-bracket'

# Word-like cursor movements.
bindkey -M 'normal' 'b' 'vi-backward-word'
bindkey -M 'normal' 'B' 'vi-backward-blank-word'
bindkey -M 'normal' 'e' 'vi-forward-word-end'
bindkey -M 'normal' 'E' 'vi-forward-blank-word-end'
bindkey -M 'normal' 'w' 'vi-forward-word'
bindkey -M 'normal' 'W' 'vi-forward-blank-word'

# In-line searches.
bindkey -M 'normal' 'f' 'vi-find-next-char'
bindkey -M 'normal' 'F' 'vi-find-prev-char'
bindkey -M 'normal' 't' 'vi-find-next-char-skip'
bindkey -M 'normal' 'T' 'vi-find-prev-char-skip'
bindkey -M 'normal' ';' 'vi-repeat-find'
bindkey -M 'normal' ',' 'vi-rev-repeat-find'

# Mode changing.
bindkey -M 'normal' 'v' 'visual-mode'
bindkey -M 'normal' 'V' 'visual-line-mode'
bindkey -M 'normal' 'i' 'vi-insert'
bindkey -M 'normal' 'I' 'vi-insert-bol'
bindkey -M 'normal' 'a' 'vi-add-next'
bindkey -M 'normal' 'A' 'vi-add-eol'
bindkey -M 'normal' 's' 'vi-substitute'
bindkey -M 'normal' 'c' 'vi-change'
bindkey -M 'normal' 'C' 'vi-change-eol'
bindkey -M 'normal' 'o' 'vi-open-line-below'
bindkey -M 'normal' 'O' 'vi-open-line-above'

# Copy & Paste.
bindkey -M 'normal' '^[[200~'   'bracketed-paste'
bindkey -M 'normal' 'y'         'vi-yank'
bindkey -M 'normal' 'Y'         'vi-yank-eol'
bindkey -M 'normal' 'p'         'vi-put-after'
bindkey -M 'normal' 'P'         'vi-put-before'

# History.
bindkey -M 'normal' '^K'    'history-beginning-search-backward'
bindkey -M 'normal' '^J'    'history-beginning-search-forward'
bindkey -M 'normal' '/'     'vi-history-search-backward'
bindkey -M 'normal' 'n'     'vi-repeat-search'
bindkey -M 'normal' 'N'     'vi-rev-repeat-search'

# Text modification manipulation.
bindkey -M 'normal' -R '1'-'9'  'digit-argument'
bindkey -M 'normal'     'u'     'undo'
bindkey -M 'normal'     '^R'    'redo'
bindkey -M 'normal'     '.'     'vi-repeat-change'

# Misc.
bindkey -M 'normal' 'r'     'vi-replace-chars'
bindkey -M 'normal' 'x'     'vi-delete-char'
bindkey -M 'normal' 'X'     'vi-backward-delete-char'
bindkey -M 'normal' 'd'     'vi-delete'
bindkey -M 'normal' 'D'     'vi-kill-eol'
bindkey -M 'normal' '#'     'pound-insert'
bindkey -M 'normal' '^M'    'accept-line'
bindkey -M 'normal' '^L'    'clear-screen'

#       VISUAL

bindkey -M 'visual' 'o'     'exchange-point-and-mark'
bindkey -M 'visual' 'p'     'put-replace-selection'
bindkey -M 'visual' 'u'     'vi-down-case'
bindkey -M 'visual' 'U'     'vi-up-case'
bindkey -M 'visual' 'j'     'down-line'
bindkey -M 'visual' 'k'     'up-line'
bindkey -M 'visual' 'aw'    'select-a-word'
bindkey -M 'visual' 'aW'    'select-a-blank-word'
bindkey -M 'visual' 'aa'    'select-a-shell-word'
bindkey -M 'visual' 'ia'    'select-a-blank-word'
bindkey -M 'visual' 'iw'    'select-in-word'
bindkey -M 'visual' 'iW'    'select-in-blank-word'

#       OPERATOR PENDING

bindkey -M 'operator_pending' 'j'   'down-line'
bindkey -M 'operator_pending' 'k'   'up-line'
bindkey -M 'operator_pending' 'aw'  'select-a-word'
bindkey -M 'operator_pending' 'aW'  'select-a-blank-word'
bindkey -M 'operator_pending' 'aa'  'select-a-shell-word'
bindkey -M 'operator_pending' 'ia'  'select-a-blank-word'
bindkey -M 'operator_pending' 'iw'  'select-in-word'
bindkey -M 'operator_pending' 'iW'  'select-in-blank-word'


#       COMPLETION SELECTION

# Actions on selections. [Left hand intended]
bindkey -M 'completion_selection' 'a'   'accept-line'                   # Accept.
bindkey -M 'completion_selection' 'A'   'accept-and-hold'               # Accept and select more.
bindkey -M 'completion_selection' 's'   'accept-and-infer-next-history' # Select subdirectories.
bindkey -M 'completion_selection' 'd'   'send-break'                    # Decline.
bindkey -M 'completion_selection' 'f'   'undo'                          # Fallback(Undo).

# Selection movememt. [Right hand intended]
bindkey -M 'completion_selection' 'h'   'vi-backward-char'          # Move left.
bindkey -M 'completion_selection' 'l'   'vi-forward-char'           # Move right.
bindkey -M 'completion_selection' 'j'   'vi-down-line-or-history'   # Move down.
bindkey -M 'completion_selection' 'k'   'vi-up-line-or-history'     # Move up.
bindkey -M 'completion_selection' 'H'   'vi-beginning-of-line'      # Move most left.
bindkey -M 'completion_selection' 'L'   'vi-end-of-line'            # Move most right.
bindkey -M 'completion_selection' 'J'   'vi-forward-blank-word'     # Move group down.
bindkey -M 'completion_selection' 'K'   'vi-backward-blank-word'    # Move group up.

# Misc.
bindkey -M 'completion_selection' '^L'  'clear-screen'  # Clear screen.
bindkey -M 'completion_selection' '^M'  '.accept-line'  # Clear screen.

########################################## CUSTOM ACTIONS ##########################################

# Workaround for very specific bug!
# When in "completion_selection", every unbinded key is defaulting to keybinding from previous mode.
# Since "insert" mode has the "jk" keybinding and "completion_selection" uses "j" and "k" to move
# around completions, when moving from "insert" to "completion_selection" mode and pressing the "j",
# zsh doesn't know if user wishes to use "j" from "completion_selection" or user will input "k" and
# use "jk" from "insert".
# Because of that, zsh will wait for some time (defined by KEYTIMEOUT variable in settings file) or
# until next key is pressed to decide what to do.
# This creates 2 problems:
#   1) There is a delay after every "j" key pressed.
#   2) If "jk" is pressed fast in "completion_selection", zsh will go to normal mode.
# Solution is to go from "insert" to "empty" mode which has no keybindings and then go from "empty"
# to "completion_selection" mode so that there are no default keybindings for "completion_selection"
function expand_or_complete
{
    zle -K empty
    zle expand-or-complete
    zle vi-insert
}
zle -N expand_or_complete

########################################### FUZZY FINDER ###########################################

#     ____      ____
#    / __/___  / __/
#   / /_/_  / / /_
#  / __/ / /_/ __/
# /_/   /___/_/ completion.zsh
#
# - $FZF_TMUX                 (default: 0)
# - $FZF_TMUX_OPTS            (default: empty)
# - $FZF_COMPLETION_TRIGGER   (default: '**')
# - $FZF_COMPLETION_OPTS      (default: empty)
# - $FZF_COMPLETION_PATH_OPTS (default: empty)
# - $FZF_COMPLETION_DIR_OPTS  (default: empty)

# To use custom commands instead of find, override _fzf_compgen_{path,dir}
#
#   _fzf_compgen_path() {
#     echo "$1"
#     command find -L "$1" \
#       -name .git -prune -o -name .hg -prune -o -name .svn -prune -o \( -type d -o -type f -o -type l \) \
#       -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
#   }
#
#   _fzf_compgen_dir() {
#     command find -L "$1" \
#       -name .git -prune -o -name .hg -prune -o -name .svn -prune -o -type d \
#       -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
#   }

###########################################################

__fzf_defaults() {
  # $1: Prepend to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
  # $2: Append to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
  echo "--height ${FZF_TMUX_HEIGHT:-40%} --bind=ctrl-z:ignore $1"
  command cat "${FZF_DEFAULT_OPTS_FILE-}" 2> /dev/null
  echo "${FZF_DEFAULT_OPTS-} $2"
}

__fzf_comprun() {
  if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then
    _fzf_comprun "$@"
  elif [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; }; then
    shift
    if [ -n "${FZF_TMUX_OPTS-}" ]; then
      fzf-tmux ${(Q)${(Z+n+)FZF_TMUX_OPTS}} -- "$@"
    else
      fzf-tmux -d ${FZF_TMUX_HEIGHT:-40%} -- "$@"
    fi
  else
    shift
    fzf "$@"
  fi
}

# Extract the name of the command. e.g. foo=1 bar baz**<tab>
__fzf_extract_command() {
  local token tokens
  tokens=(${(z)1})
  for token in $tokens; do
    token=${(Q)token}
    if [[ "$token" =~ [[:alnum:]] && ! "$token" =~ "=" ]]; then
      echo "$token"
      return
    fi
  done
  echo "${tokens[1]}"
}

__fzf_generic_path_completion() {
  local base lbuf cmd compgen fzf_opts suffix tail dir leftover matches
  base=$1
  lbuf=$2
  cmd=$(__fzf_extract_command "$lbuf")
  compgen=$3
  fzf_opts=$4
  suffix=$5
  tail=$6

  setopt localoptions nonomatch
  if [[ $base = *'$('* ]] || [[ $base = *'<('* ]] || [[ $base = *'>('* ]] || [[ $base = *':='* ]] || [[ $base = *'`'* ]]; then
    return
  fi
  eval "base=$base" 2> /dev/null || return
  [[ $base = *"/"* ]] && dir="$base"
  while [ 1 ]; do
    if [[ -z "$dir" || -d ${dir} ]]; then
      leftover=${base/#"$dir"}
      leftover=${leftover/#\/}
      [ -z "$dir" ] && dir='.'
      [ "$dir" != "/" ] && dir="${dir/%\//}"
      matches=$(
        export FZF_DEFAULT_OPTS
        FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --scheme=path" "${FZF_COMPLETION_OPTS-}")
        unset FZF_DEFAULT_COMMAND FZF_DEFAULT_OPTS_FILE
        if declare -f "$compgen" > /dev/null; then
          eval "$compgen $(printf %q "$dir")" | __fzf_comprun "$cmd" ${(Q)${(Z+n+)fzf_opts}} -q "$leftover"
        else
          if [[ $compgen =~ dir ]]; then
            walker=dir,follow
            rest=${FZF_COMPLETION_DIR_OPTS-}
          else
            walker=file,dir,follow,hidden
            rest=${FZF_COMPLETION_PATH_OPTS-}
          fi
          __fzf_comprun "$cmd" ${(Q)${(Z+n+)fzf_opts}} -q "$leftover" --walker "$walker" --walker-root="$dir" ${(Q)${(Z+n+)rest}} < /dev/tty
        fi | while read -r item; do
          item="${item%$suffix}$suffix"
          echo -n -E "${(q)item} "
        done
      )
      matches=${matches% }
      if [ -n "$matches" ]; then
        LBUFFER="$lbuf$matches$tail"
      fi
      zle reset-prompt
      break
    fi
    dir=$(dirname "$dir")
    dir=${dir%/}/
  done
}

_fzf_path_completion() {
  __fzf_generic_path_completion "$1" "$2" _fzf_compgen_path \
    "-m" "" " "
}

_fzf_dir_completion() {
  __fzf_generic_path_completion "$1" "$2" _fzf_compgen_dir \
    "" "/" ""
}

_fzf_feed_fifo() {
  command rm -f "$1"
  mkfifo "$1"
  cat <&0 > "$1" &|
}

_fzf_complete() {
  setopt localoptions ksh_arrays
  # Split arguments around --
  local args rest str_arg i sep
  args=("$@")
  sep=
  for i in {0..${#args[@]}}; do
    if [[ "${args[$i]-}" = -- ]]; then
      sep=$i
      break
    fi
  done
  if [[ -n "$sep" ]]; then
    str_arg=
    rest=("${args[@]:$((sep + 1)):${#args[@]}}")
    args=("${args[@]:0:$sep}")
  else
    str_arg=$1
    args=()
    shift
    rest=("$@")
  fi

  local fifo lbuf cmd matches post
  fifo="${TMPDIR:-/tmp}/fzf-complete-fifo-$$"
  lbuf=${rest[0]}
  cmd=$(__fzf_extract_command "$lbuf")
  post="${funcstack[1]}_post"
  type $post > /dev/null 2>&1 || post=cat

  _fzf_feed_fifo "$fifo"
  matches=$(
    FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse" "${FZF_COMPLETION_OPTS-} $str_arg") \
    FZF_DEFAULT_OPTS_FILE='' \
      __fzf_comprun "$cmd" "${args[@]}" -q "${(Q)prefix}" < "$fifo" | $post | tr '\n' ' ')
  if [ -n "$matches" ]; then
    LBUFFER="$lbuf$matches"
  fi
  command rm -f "$fifo"
}

# To use custom hostname lists, override __fzf_list_hosts.
# The function is expected to print hostnames, one per line as well as in the
# desired sorting and with any duplicates removed, to standard output.
if ! declare -f __fzf_list_hosts > /dev/null; then
  __fzf_list_hosts() {
    setopt localoptions nonomatch
    command cat <(command tail -n +1 ~/.ssh/config ~/.ssh/config.d/* /etc/ssh/ssh_config 2> /dev/null | command grep -i '^\s*host\(name\)\? ' | awk '{for (i = 2; i <= NF; i++) print $1 " " $i}' | command grep -v '[*?%]') \
      <(command grep -oE '^[[a-z0-9.,:-]+' ~/.ssh/known_hosts 2> /dev/null | tr ',' '\n' | tr -d '[' | awk '{ print $1 " " $1 }') \
      <(command grep -v '^\s*\(#\|$\)' /etc/hosts 2> /dev/null | command grep -Fv '0.0.0.0' | command sed 's/#.*//') |
      awk '{for (i = 2; i <= NF; i++) print $i}' | sort -u
  }
fi

_fzf_complete_telnet() {
  _fzf_complete +m -- "$@" < <(__fzf_list_hosts)
}

# The first and the only argument is the LBUFFER without the current word that contains the trigger.
# The current word without the trigger is in the $prefix variable passed from the caller.
_fzf_complete_ssh() {
  local -a tokens
  tokens=(${(z)1})
  case ${tokens[-1]} in
    -i|-F|-E)
      _fzf_path_completion "$prefix" "$1"
      ;;
    *)
      local user
      [[ $prefix =~ @ ]] && user="${prefix%%@*}@"
      _fzf_complete +m -- "$@" < <(__fzf_list_hosts | awk -v user="$user" '{print user $0}')
      ;;
  esac
}

_fzf_complete_export() {
  _fzf_complete -m -- "$@" < <(
    declare -xp | sed 's/=.*//' | sed 's/.* //'
  )
}

_fzf_complete_unset() {
  _fzf_complete -m -- "$@" < <(
    declare -xp | sed 's/=.*//' | sed 's/.* //'
  )
}

_fzf_complete_unalias() {
  _fzf_complete +m -- "$@" < <(
    alias | sed 's/=.*//'
  )
}

_fzf_complete_kill() {
  _fzf_complete -m --header-lines=1 --no-preview --wrap -- "$@" < <(
    command ps -eo user,pid,ppid,start,time,command 2> /dev/null ||
      command ps -eo user,pid,ppid,time,args 2> /dev/null || # For BusyBox
      command ps --everyone --full --windows # For cygwin
  )
}

_fzf_complete_kill_post() {
  awk '{print $2}'
}

fzf-completion() {
  local tokens cmd prefix trigger tail matches lbuf d_cmds
  setopt localoptions noshwordsplit noksh_arrays noposixbuiltins

  # http://zsh.sourceforge.net/FAQ/zshfaq03.html
  # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
  tokens=(${(z)LBUFFER})
  if [ ${#tokens} -lt 1 ]; then
    zle ${fzf_default_completion:-expand-or-complete}
    return
  fi

  cmd=$(__fzf_extract_command "$LBUFFER")

  # Explicitly allow for empty trigger.
  trigger=${FZF_COMPLETION_TRIGGER-'**'}
  [ -z "$trigger" -a ${LBUFFER[-1]} = ' ' ] && tokens+=("")

  # When the trigger starts with ';', it becomes a separate token
  if [[ ${LBUFFER} = *"${tokens[-2]-}${tokens[-1]}" ]]; then
    tokens[-2]="${tokens[-2]-}${tokens[-1]}"
    tokens=(${tokens[0,-2]})
  fi

  lbuf=$LBUFFER
  tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))}

  # Trigger sequence given
  if [ ${#tokens} -gt 1 -a "$tail" = "$trigger" ]; then
    d_cmds=(${=FZF_COMPLETION_DIR_COMMANDS-cd pushd rmdir})

    [ -z "$trigger"      ] && prefix=${tokens[-1]} || prefix=${tokens[-1]:0:-${#trigger}}
    if [[ $prefix = *'$('* ]] || [[ $prefix = *'<('* ]] || [[ $prefix = *'>('* ]] || [[ $prefix = *':='* ]] || [[ $prefix = *'`'* ]]; then
      return
    fi
    [ -n "${tokens[-1]}" ] && lbuf=${lbuf:0:-${#tokens[-1]}}

    if eval "type _fzf_complete_${cmd} > /dev/null"; then
      prefix="$prefix" eval _fzf_complete_${cmd} ${(q)lbuf}
      zle reset-prompt
    elif [ ${d_cmds[(i)$cmd]} -le ${#d_cmds} ]; then
      _fzf_dir_completion "$prefix" "$lbuf"
    else
      _fzf_path_completion "$prefix" "$lbuf"
    fi
  # Fall back to default completion
  else
    zle ${fzf_default_completion:-expand-or-complete}
  fi
}

[ -z "$fzf_default_completion" ] && {
  binding=$(bindkey '^I')
  [[ $binding =~ 'undefined-key' ]] || fzf_default_completion=$binding[(s: :w)2]
  unset binding
}

zle     -N   fzf-completion
bindkey '^I' fzf-completion



#     ____      ____
#    / __/___  / __/
#   / /_/_  / / /_
#  / __/ / /_/ __/
# /_/   /___/_/ key-bindings.zsh
#
# - $FZF_TMUX_OPTS
# - $FZF_CTRL_T_COMMAND
# - $FZF_CTRL_T_OPTS
# - $FZF_CTRL_R_OPTS
# - $FZF_ALT_C_COMMAND
# - $FZF_ALT_C_OPTS

__fzf_defaults() {
  # $1: Prepend to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
  # $2: Append to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
  echo "--height ${FZF_TMUX_HEIGHT:-40%} --bind=ctrl-z:ignore $1"
  command cat "${FZF_DEFAULT_OPTS_FILE-}" 2> /dev/null
  echo "${FZF_DEFAULT_OPTS-} $2"
}

# CTRL-T - Paste the selected file path(s) into the command line
__fzf_select() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  FZF_DEFAULT_COMMAND=${FZF_CTRL_T_COMMAND:-} \
  FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=file,dir,follow,hidden --scheme=path" "${FZF_CTRL_T_OPTS-} -m") \
  FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) "$@" < /dev/tty | while read -r item; do
    echo -n -E "${(q)item} "
  done
  local ret=$?
  echo
  return $ret
}

__fzfcmd() {
  [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

fzf-file-widget() {
  LBUFFER="${LBUFFER}$(__fzf_select)"
  local ret=$?
  zle reset-prompt
  return $ret
}
if [[ "${FZF_CTRL_T_COMMAND-x}" != "" ]]; then
  zle     -N            fzf-file-widget
  bindkey -M vicmd '^T' fzf-file-widget
  bindkey -M viins '^T' fzf-file-widget
fi

# ALT-C - cd into the selected directory
fzf-cd-widget() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  local dir="$(
    FZF_DEFAULT_COMMAND=${FZF_ALT_C_COMMAND:-} \
    FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=dir,follow,hidden --scheme=path" "${FZF_ALT_C_OPTS-} +m") \
    FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) < /dev/tty)"
  if [[ -z "$dir" ]]; then
    zle redisplay
    return 0
  fi
  zle push-line # Clear buffer. Auto-restored on next prompt.
  BUFFER="builtin cd -- ${(q)dir:a}"
  zle accept-line
  local ret=$?
  unset dir # ensure this doesn't end up appearing in prompt expansion
  zle reset-prompt
  return $ret
}
if [[ "${FZF_ALT_C_COMMAND-x}" != "" ]]; then
  zle     -N             fzf-cd-widget
  bindkey -M vicmd '\ec' fzf-cd-widget
  bindkey -M viins '\ec' fzf-cd-widget
fi

# CTRL-R - Paste the selected command from history into the command line
fzf-history-widget() {
  local selected
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases noglob nobash_rematch 2> /dev/null
  # Ensure the associative history array, which maps event numbers to the full
  # history lines, is loaded, and that Perl is installed for multi-line output.
  if zmodload -F zsh/parameter p:history 2>/dev/null && (( ${#commands[perl]} )); then
    selected="$(printf '%s\t%s\000' "${(kv)history[@]}" |
      perl -0 -ne 'if (!$seen{(/^\s*[0-9]+\**\t(.*)/s, $1)}++) { s/\n/\n\t/g; print; }' |
      FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '\t↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m --read0") \
      FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd))"
  else
    selected="$(fc -rl 1 | awk '{ cmd=$0; sub(/^[ \t]*[0-9]+\**[ \t]+/, "", cmd); if (!seen[cmd]++) print $0 }' |
      FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '\t↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m") \
      FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd))"
  fi
  local ret=$?
  if [ -n "$selected" ]; then
    if [[ $(awk '{print $1; exit}' <<< "$selected") =~ ^[1-9][0-9]* ]]; then
      zle vi-fetch-history -n $MATCH
    else # selected is a custom query, not from history
      LBUFFER="$selected"
    fi
  fi
  zle reset-prompt
  return $ret
}
zle     -N            fzf-history-widget
bindkey -M vicmd '^R' fzf-history-widget
bindkey -M viins '^R' fzf-history-widget
