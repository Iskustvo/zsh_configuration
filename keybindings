#!/bin/zsh

############################################ VIM MODES #############################################

# Delete all existing modes.
bindkey -D "${keymaps[@]}" &>/dev/null

# Create custom modes.
bindkey -N 'insert'
bindkey -N 'normal'
bindkey -N 'visual'
bindkey -N 'operator_pending'
bindkey -N 'completion_selection'
bindkey -N 'empty'

# Make zsh work well with custom modes.
bindkey -A 'insert'               'main'
bindkey -A 'insert'               'viins'
bindkey -A 'normal'               'vicmd'
bindkey -A 'operator_pending'     'viopp'
bindkey -A 'completion_selection' 'menuselect'

########################################### KEYBINDINGS ############################################

#       INSERT

bindkey -M 'insert' -R '\x20'-'\x7e'    'self-insert'
bindkey -M 'insert'    '^[[200~'        'bracketed-paste'
bindkey -M 'insert'    '^?'             'backward-delete-char'
bindkey -M 'insert'    '^M'             'accept-line'
bindkey -M 'insert'    '^V'             'vi-quoted-insert'
bindkey -M 'insert'    '^L'             'clear-screen'
bindkey -M 'insert'    '^I'             'expand_or_complete'
bindkey -M 'insert'    '^K'             'history-beginning-search-backward'
bindkey -M 'insert'    '^J'             'history-beginning-search-forward'
bindkey -M 'insert'    '^A'             'insert-last-word'
bindkey -M 'insert'    'jk'             'vi-cmd-mode'

#       NORMAL

# Simple cursor movements.
bindkey -M 'normal' 'h' 'vi-backward-char'
bindkey -M 'normal' 'l' 'vi-forward-char'
bindkey -M 'normal' 'j' 'vi-down-line-or-history'
bindkey -M 'normal' 'k' 'vi-up-line-or-history'
bindkey -M 'normal' '0' 'vi-digit-or-beginning-of-line'
bindkey -M 'normal' '^' 'vi-first-non-blank'
bindkey -M 'normal' '$' 'vi-end-of-line'
bindkey -M 'normal' '%' 'vi-match-bracket'

# Word-like cursor movements.
bindkey -M 'normal' 'b' 'vi-backward-word'
bindkey -M 'normal' 'B' 'vi-backward-blank-word'
bindkey -M 'normal' 'e' 'vi-forward-word-end'
bindkey -M 'normal' 'E' 'vi-forward-blank-word-end'
bindkey -M 'normal' 'w' 'vi-forward-word'
bindkey -M 'normal' 'W' 'vi-forward-blank-word'

# In-line searches.
bindkey -M 'normal' 'f' 'vi-find-next-char'
bindkey -M 'normal' 'F' 'vi-find-prev-char'
bindkey -M 'normal' 't' 'vi-find-next-char-skip'
bindkey -M 'normal' 'T' 'vi-find-prev-char-skip'
bindkey -M 'normal' ';' 'vi-repeat-find'
bindkey -M 'normal' ',' 'vi-rev-repeat-find'

# Mode changing.
bindkey -M 'normal' 'v' 'visual-mode'
bindkey -M 'normal' 'V' 'visual-line-mode'
bindkey -M 'normal' 'i' 'vi-insert'
bindkey -M 'normal' 'I' 'vi-insert-bol'
bindkey -M 'normal' 'a' 'vi-add-next'
bindkey -M 'normal' 'A' 'vi-add-eol'
bindkey -M 'normal' 's' 'vi-substitute'
bindkey -M 'normal' 'c' 'vi-change'
bindkey -M 'normal' 'C' 'vi-change-eol'
bindkey -M 'normal' 'o' 'vi-open-line-below'
bindkey -M 'normal' 'O' 'vi-open-line-above'

# Copy & Paste.
bindkey -M 'normal' '^[[200~'   'bracketed-paste'
bindkey -M 'normal' 'y'         'vi-yank'
bindkey -M 'normal' 'Y'         'vi-yank-eol'
bindkey -M 'normal' 'p'         'vi-put-after'
bindkey -M 'normal' 'P'         'vi-put-before'

# History.
bindkey -M 'normal' '^K'    'history-beginning-search-backward'
bindkey -M 'normal' '^J'    'history-beginning-search-forward'
bindkey -M 'normal' '/'     'vi-history-search-backward'
bindkey -M 'normal' 'n'     'vi-repeat-search'
bindkey -M 'normal' 'N'     'vi-rev-repeat-search'

# Text modification manipulation.
bindkey -M 'normal' -R '1'-'9'  'digit-argument'
bindkey -M 'normal'     'u'     'undo'
bindkey -M 'normal'     '^R'    'redo'
bindkey -M 'normal'     '.'     'vi-repeat-change'

# Misc.
bindkey -M 'normal' 'r'     'vi-replace-chars'
bindkey -M 'normal' 'x'     'vi-delete-char'
bindkey -M 'normal' 'X'     'vi-backward-delete-char'
bindkey -M 'normal' 'd'     'vi-delete'
bindkey -M 'normal' 'D'     'vi-kill-eol'
bindkey -M 'normal' '#'     'pound-insert'
bindkey -M 'normal' '^M'    'accept-line'
bindkey -M 'normal' '^L'    'clear-screen'

#       VISUAL

bindkey -M 'visual' 'o'     'exchange-point-and-mark'
bindkey -M 'visual' 'p'     'put-replace-selection'
bindkey -M 'visual' 'u'     'vi-down-case'
bindkey -M 'visual' 'U'     'vi-up-case'
bindkey -M 'visual' 'j'     'down-line'
bindkey -M 'visual' 'k'     'up-line'
bindkey -M 'visual' 'aw'    'select-a-word'
bindkey -M 'visual' 'aW'    'select-a-blank-word'
bindkey -M 'visual' 'aa'    'select-a-shell-word'
bindkey -M 'visual' 'ia'    'select-a-blank-word'
bindkey -M 'visual' 'iw'    'select-in-word'
bindkey -M 'visual' 'iW'    'select-in-blank-word'

#       OPERATOR PENDING

bindkey -M 'operator_pending' 'j'   'down-line'
bindkey -M 'operator_pending' 'k'   'up-line'
bindkey -M 'operator_pending' 'aw'  'select-a-word'
bindkey -M 'operator_pending' 'aW'  'select-a-blank-word'
bindkey -M 'operator_pending' 'aa'  'select-a-shell-word'
bindkey -M 'operator_pending' 'ia'  'select-a-blank-word'
bindkey -M 'operator_pending' 'iw'  'select-in-word'
bindkey -M 'operator_pending' 'iW'  'select-in-blank-word'


#       COMPLETION SELECTION

# Actions on selections. [Left hand intended]
bindkey -M 'completion_selection' 'a'   'accept-line'                   # Accept.
bindkey -M 'completion_selection' 'A'   'accept-and-hold'               # Accept and select more.
bindkey -M 'completion_selection' 's'   'accept-and-infer-next-history' # Select subdirectories.
bindkey -M 'completion_selection' 'd'   'send-break'                    # Decline.
bindkey -M 'completion_selection' 'f'   'undo'                          # Fallback(Undo).

# Selection movememt. [Right hand intended]
bindkey -M 'completion_selection' 'h'   'vi-backward-char'          # Move left.
bindkey -M 'completion_selection' 'l'   'vi-forward-char'           # Move right.
bindkey -M 'completion_selection' 'j'   'vi-down-line-or-history'   # Move down.
bindkey -M 'completion_selection' 'k'   'vi-up-line-or-history'     # Move up.
bindkey -M 'completion_selection' 'H'   'vi-beginning-of-line'      # Move most left.
bindkey -M 'completion_selection' 'L'   'vi-end-of-line'            # Move most right.
bindkey -M 'completion_selection' 'J'   'vi-forward-blank-word'     # Move group down.
bindkey -M 'completion_selection' 'K'   'vi-backward-blank-word'    # Move group up.

# Misc.
bindkey -M 'completion_selection' '^L'  'clear-screen'  # Clear screen.
bindkey -M 'completion_selection' '^M'  '.accept-line'  # Clear screen.

########################################## CUSTOM ACTIONS ##########################################

# Workaround for very specific bug!
# When in "completion_selection", every unbinded key is defaulting to keybinding from previous mode.
# Since "insert" mode has the "jk" keybinding and "completion_selection" uses "j" and "k" to move
# around completions, when moving from "insert" to "completion_selection" mode and pressing the "j",
# zsh doesn't know if user wishes to use "j" from "completion_selection" or user will input "k" and
# use "jk" from "insert".
# Because of that, zsh will wait for some time (defined by KEYTIMEOUT variable in settings file) or
# until next key is pressed to decide what to do.
# This creates 2 problems:
#   1) There is a delay after every "j" key pressed.
#   2) If "jk" is pressed fast in "completion_selection", zsh will go to normal mode.
# Solution is to go from "insert" to "empty" mode which has no keybindings and then go from "empty"
# to "completion_selection" mode so that there are no default keybindings for "completion_selection"
function expand_or_complete
{
    zle -K empty
    zle expand-or-complete
    zle vi-insert
}
zle -N expand_or_complete

########################################### FUZZY FINDER ###########################################


#     ____      ____
#    / __/___  / __/
#   / /_/_  / / /_
#  / __/ / /_/ __/
# /_/   /___/_/ key-bindings.zsh
#
# - $FZF_TMUX_OPTS
# - $FZF_CTRL_T_COMMAND
# - $FZF_CTRL_T_OPTS
# - $FZF_CTRL_R_OPTS
# - $FZF_ALT_C_COMMAND
# - $FZF_ALT_C_OPTS

__fzf_defaults() {
  # $1: Prepend to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
  # $2: Append to FZF_DEFAULT_OPTS_FILE and FZF_DEFAULT_OPTS
  echo "--height ${FZF_TMUX_HEIGHT:-40%} --bind=ctrl-z:ignore $1"
  command cat "${FZF_DEFAULT_OPTS_FILE-}" 2> /dev/null
  echo "${FZF_DEFAULT_OPTS-} $2"
}

# CTRL-T - Paste the selected file path(s) into the command line
__fzf_select() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  FZF_DEFAULT_COMMAND=${FZF_CTRL_T_COMMAND:-} \
  FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=file,dir,follow,hidden --scheme=path" "${FZF_CTRL_T_OPTS-} -m") \
  FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) "$@" < /dev/tty | while read -r item; do
    echo -n -E "${(q)item} "
  done
  local ret=$?
  echo
  return $ret
}

__fzfcmd() {
  [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

fzf-file-widget() {
  LBUFFER="${LBUFFER}$(__fzf_select)"
  local ret=$?
  zle reset-prompt
  return $ret
}
if [[ "${FZF_CTRL_T_COMMAND-x}" != "" ]]; then
  zle     -N            fzf-file-widget
  bindkey -M vicmd '^T' fzf-file-widget
  bindkey -M viins '^T' fzf-file-widget
fi

# ALT-C - cd into the selected directory
fzf-cd-widget() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  local dir="$(
    FZF_DEFAULT_COMMAND=${FZF_ALT_C_COMMAND:-} \
    FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=dir,follow,hidden --scheme=path" "${FZF_ALT_C_OPTS-} +m") \
    FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) < /dev/tty)"
  if [[ -z "$dir" ]]; then
    zle redisplay
    return 0
  fi
  zle push-line # Clear buffer. Auto-restored on next prompt.
  BUFFER="builtin cd -- ${(q)dir:a}"
  zle accept-line
  local ret=$?
  unset dir # ensure this doesn't end up appearing in prompt expansion
  zle reset-prompt
  return $ret
}
if [[ "${FZF_ALT_C_COMMAND-x}" != "" ]]; then
  zle     -N             fzf-cd-widget
  bindkey -M vicmd '\ec' fzf-cd-widget
  bindkey -M viins '\ec' fzf-cd-widget
fi

# CTRL-R - Paste the selected command from history into the command line
fzf-history-widget() {
  local selected
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases noglob nobash_rematch 2> /dev/null
  # Ensure the associative history array, which maps event numbers to the full
  # history lines, is loaded, and that Perl is installed for multi-line output.
  if zmodload -F zsh/parameter p:history 2>/dev/null && (( ${#commands[perl]} )); then
    selected="$(printf '%s\t%s\000' "${(kv)history[@]}" |
      perl -0 -ne 'if (!$seen{(/^\s*[0-9]+\**\t(.*)/s, $1)}++) { s/\n/\n\t/g; print; }' |
      FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '\t↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m --read0") \
      FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd))"
  else
    selected="$(fc -rl 1 | awk '{ cmd=$0; sub(/^[ \t]*[0-9]+\**[ \t]+/, "", cmd); if (!seen[cmd]++) print $0 }' |
      FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '\t↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} --query=${(qqq)LBUFFER} +m") \
      FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd))"
  fi
  local ret=$?
  if [ -n "$selected" ]; then
    if [[ $(awk '{print $1; exit}' <<< "$selected") =~ ^[1-9][0-9]* ]]; then
      zle vi-fetch-history -n $MATCH
    else # selected is a custom query, not from history
      LBUFFER="$selected"
    fi
  fi
  zle reset-prompt
  return $ret
}
zle     -N            fzf-history-widget
bindkey -M vicmd '^R' fzf-history-widget
bindkey -M viins '^R' fzf-history-widget
