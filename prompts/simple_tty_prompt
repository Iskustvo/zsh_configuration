#!/bin/zsh

######################################################## COLORS ########################################################

# Default color/style.
NO_COLOR=$'%{\e[0m%}'

# Color for regular text inside of prompt.
TEXT_COLOR=$'%{\e[30m%}'

# Colors for icons.
FAILED_COLOR=$'%{\e[1;31m%}'

# Prompt colors based on Vim modes.
VIM_NORMAL_PROMPT='2'
VIM_INSERT_PROMPT='3'

# Color of separator.
SEPARATOR_BG=$'%{\e[0;40m%}'
SEPARATOR_FG=$'%{\e[30m%}'

# Git prompt colors based on git status.
GIT_CONFLICT='1'
GIT_CHANGED='3'
GIT_UNCHANGED='2'

######################################################### MAIN #########################################################

# Choose prompt color based on current Vim mode.
case "${VIM_MODE}" in
    normal)
            PROMPT_BG=$'%{\e[0;4'"${VIM_NORMAL_PROMPT}"'m%}'
            PROMPT_FG=$'%{\e[3'"${VIM_NORMAL_PROMPT}"'m%}'
            ;;
    *)
            PROMPT_BG=$'%{\e[0;4'"${VIM_INSERT_PROMPT}"'m%}'
            PROMPT_FG=$'%{\e[3'"${VIM_INSERT_PROMPT}"'m%}'
            ;;
esac

# Build components for main prompt.
LAST_EXIT_STATUS="${PROMPT_BG}%(0?,,%(148?,, ${FAILED_COLOR}X))"
BACKGROUNDED_JOBS=" ${JOBS_COLOR}%(1j,down_arrow%j ,)"
USER_INFO=" ${PROMPT_BG}${TEXT_COLOR}%n @ %m "
PROMPT_SEPARATOR="${SEPARATOR_BG}${PROMPT_FG}${PROMPT_BG}${SEPARATOR_FG}"
DIRECTORY=" ${TEXT_COLOR}%1~ "

# Build git prompt.
GIT_DIR="$(git rev-parse --git-dir 2>/dev/null)"
if [[ -z "${GIT_DIR}" ]]; then
    # Not a git repository => Just finish main prompt.
    GIT_PROMPT="${NO_COLOR}${PROMPT_FG}${NO_COLOR} "
else
    # Get branch name(or first 7 digits of checkouted SHA) and set the appropriate symbol.
    if [[ -d "${GIT_DIR}/rebase-merge" ]]; then
        # Interactive rebase.
        BRANCH="$(basename "$(< "${GIT_DIR}/rebase-merge/head-name" )")"
        BRANCH="${BRANCH:/detached HEAD/"$(head -c 7 "${GIT_DIR}/rebase-merge/orig-head")"}"
        SYMBOL='(rebase -i)'
    elif [[ -d "$(git rev-parse --git-path rebase-apply)" ]]; then
        # Rebase.
        BRANCH="$(basename "$(< "${GIT_DIR}/rebase-apply/head-name" )")"
        BRANCH="${BRANCH:/detached HEAD/"$(head -c 7 "${GIT_DIR}/rebase-apply/orig-head")"}"
        SYMBOL='(rebase)'
    elif [[ -f "$(git rev-parse --git-path MERGE_HEAD)" ]]; then
        # Merge.
        BRANCH="$(basename "$(< "${GIT_DIR}/HEAD" )")"
        [[ "${BRANCH}" =~ ^[0-9a-f]{40}$ ]] && BRANCH="${BRANCH:0:7}"
        SYMBOL='(merge)'
    elif [[ -f "$(git rev-parse --git-path CHERRY_PICK_HEAD)" ]]; then
        # Cherry-pick.
        BRANCH="$(basename "$(< "${GIT_DIR}/HEAD" )")"
        [[ "${BRANCH}" =~ ^[0-9a-f]{40}$ ]] && BRANCH="${BRANCH:0:7}"
        SYMBOL='(cherry-pick)'
    else
        # Nothing important in progress.
        BRANCH="$(basename "$(< "${GIT_DIR}/HEAD" )")" && SYMBOL=''
        [[ "${BRANCH}" =~ ^[0-9a-f]{40}$ ]] && BRANCH="${BRANCH:0:7}" && SYMBOL='♦'
    fi

    # Decide the background color based on current status.
    if [[ -n "$(git ls-files --unmerged)" ]]; then
        # Stuck in the middle of rebase|merge|cherry-pick.
        GIT_BG=$'%{\e[0;4'"${GIT_CONFLICT}"'m%}'
        GIT_FG=$'%{\e[0;3'"${GIT_CONFLICT}"'m%}'
    elif ! git diff-index --quiet HEAD -- || [[ -n "$(git ls-files -o --exclude-standard)" ]]; then
        # There are uncommited changes or untracted files.
        GIT_BG=$'%{\e[0;4'"${GIT_CHANGED}"'m%}'
        GIT_FG=$'%{\e[0;3'"${GIT_CHANGED}"'m%}'
    else
        # No changes.
        GIT_BG=$'%{\e[0;4'"${GIT_UNCHANGED}"'m%}'
        GIT_FG=$'%{\e[0;3'"${GIT_UNCHANGED}"'m%}'
    fi

    # Create git prompt from gathered informations.
    GIT_SEPARATOR="${SEPARATOR_BG}${PROMPT_FG}${GIT_BG}${SEPARATOR_FG}"
    GIT_PROMPT="${GIT_SEPARATOR} ${TEXT_COLOR}${SYMBOL} ${BRANCH} ${GIT_FG}${NO_COLOR} "
fi

# Print the whole prompt.
echo "${LAST_EXIT_STATUS}${JOBS}${USER_INFO}${PROMPT_SEPARATOR}${DIRECTORY}${GIT_PROMPT}"
